<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Development | Oliver Thylmann]]></title>
  <link href="http://thylmann.net/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://thylmann.net/"/>
  <updated>2012-04-10T11:31:57+02:00</updated>
  <id>http://thylmann.net/</id>
  <author>
    <name><![CDATA[Oliver Thylmann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The solutions for the plain text nut]]></title>
    <link href="http://thylmann.net/blog/2010/02/20/the-solutions-for-the-plain-text-nut/"/>
    <updated>2010-02-20T12:33:00+01:00</updated>
    <id>http://thylmann.net/blog/2010/02/20/the-solutions-for-the-plain-text-nut</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;I have a further evolution of my <a href="http://thylmann.net/blog/2009/8/15/the-evolution-of-my-rememberall.html">Rememberall</a>. It's really staying mostly the same but I have added three things to further allow me to work efficiently. &lt;/p&gt;</p>

<p>&lt;p&gt;You have to remember that I am a text nut. I like stuff in plain text files. I like writing down stuff quickly and knowing its there somewhere without worrying where.&lt;/p&gt;</p>

<p>&lt;p&gt;So one of those apps I added, via <a href="http://twit.tv/mbw">MacBreak Weekly</a> or <a href="http://twit.tv/twit">TWiT</a> I think, is <a href="http://notational.net/">Notational Velocity</a>. It's a mouseless text entry system just made for quick text entry and retrieval. You have one search box, searching all your notes. Whenever you press enter a new note is created, when you press down you go into the list of notes. Simple as that. The fun extra thing is that you can tell Notational that it should store all texts in text files, which in my case get stored in a special directory that is synced to <a href="http://dropbox.com/">Dropbox</a>. Oh the joy ;)&lt;/p&gt;</p>

<p>&lt;p&gt;I have been working with notes like that for some time, but mostly in TextMate. The thing that is missing is easy access to the notes from the iPhone. Welcome <a href="http://simplenoteapp.com/">Simplenote</a>! It's a website where you can write text files and see them and they have an iPhone app and an API. Hence, now my Notational Velocity Syncs with Simplenote on my iPhone, and thanks to the pro Account all text files are backuped and I got an email I can simply send stuff to and have it converted into a Simplenote. I can also get an RSS Feed from my Notes. Oh the joy! :)&lt;/p&gt;</p>

<p>&lt;p&gt;So finally I have the solution I needed to have my written notes with me all the time. &lt;/p&gt;</p>

<p>&lt;p&gt;The other one I just bought for the iPhone is <a href="http://www.momentoapp.com/">Momento</a>. It's not perfect yet but it is going in the right directly. It is kind of a personal diary but the nice thing is that it can backup all your twitter items and flickr items and last.fm items. Now I am not using last.fm that much, but this really makes me wonder. I already suggested to the developer that they integrate more services and make me pay one by one. I would happily do that for Foursquare for example to add location to the diary. It might also solve my full backup bit.&lt;/p&gt;</p>

<p>&lt;p&gt;Oh the joy! ;)&lt;/p&gt;</p>

<p>&lt;p&gt;But I am repeating myself.&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved Blog to Squarespace]]></title>
    <link href="http://thylmann.net/blog/2009/06/16/moved-blog-to-squarespace/"/>
    <updated>2009-06-16T08:23:00+02:00</updated>
    <id>http://thylmann.net/blog/2009/06/16/moved-blog-to-squarespace</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;Good day everyone and welcome on the new home of my blog! I moved everything over to <a href="http://www.squarespace.com/?associateTag=olivert">Squarespace </a>after being brainwashed over weeks by <a href="http://twit.tv">TWiT</a>. :) &lt;/p&gt;</p>

<p>&lt;p&gt;I have to admit that the system is really nice, even though I still have a small problem with importing my old entries into the blog (new lines get lost but can be revived through a short edit). This is supposed to be fixed in the next two weeks. Customer care by them has been amazing with questions answered mostly within minutes. Another item is that I still need to use friendfeed as a lifestream system for the homepage, but it seems that lifestreaming is coming in due time, currently in <a href="http://esquareda.com/lifestream/">beta testing</a>. &lt;/p&gt;</p>

<p>&lt;p&gt;I just wanted to get rid of managing my own server even though I loose the opportunity to play with a lot of fun stuff ... which might be good anyway, you know time and all. This new site will hold an aggregated stream on the frontpage (once out of beta or me in the beta ;)), my blog, a short about me, contact information as well as a private section for family which is very easy to set up on Squarespace. This actually covers all I need from my system.&lt;/p&gt;</p>

<p>&lt;p&gt;The only problem was changes in URL structure but I hacked together a small PHP Script that is now handing over permanent redirects to search engines to the new urls which was easy enough.&lt;/p&gt;</p>

<p>&lt;p&gt;Looking forward to more interesting things from Squarespace (i.e. iPhone app :)) and talk to you soon.&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of Making Things Happen by Scott Berkun]]></title>
    <link href="http://thylmann.net/blog/2009/06/08/review-of-making-things-happen-by-scott-berkun/"/>
    <updated>2009-06-08T10:42:00+02:00</updated>
    <id>http://thylmann.net/blog/2009/06/08/review-of-making-things-happen-by-scott-berkun</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;<a href="http://oreilly.com/catalog/9780596517717/">Making Things Happen</a> is one of the best project management books I have read in a long term, period. You can stop reading now and just buy the book if you want. <a href="http://blogs.harvardbusiness.org/berkun/">Scott Berkun also has a very good Blog</a> to follow. Otherwise, continue for a summary of the book, which is unique to me though. This is something that Scott makes very clear, in that project management is different for everyone and should be.&lt;/p&gt;</p>

<p>&lt;p&gt;He starts out by saying that we need to learn from the past, which Boeing does with something they call a Black Book. This learning from the past also means from different professions. If you think you have difficult project management, watch a kitchen work in full forward press and you will think differently for example.&lt;/p&gt;</p>

<p>&lt;p&gt;I liked his starting point that a project manager might actually not be needed as a dedicated position if you can distribute the responsibilities to different people on the team, which we are doing here actually. But you need somebody to lead the bug triage and who is looking at the schedule which we will enforce now. Another important role at Microsoft is actually the program manager who is kind of doing everything that nobody else does, being a kind of connection person between everybody from tech and business sides. &lt;/p&gt;</p>

<p>&lt;p&gt;But already a PM as such has two hearts in that she has to have an ego but not an ego, an autocrat that wants to delegate and tolerance of ambiguity in the pursuit of perfection ... they are leaders and mangers. &lt;/p&gt;</p>

<p>&lt;p&gt;In the end, and I loved this, there are three things in a project that you need to focus on: a goal, a pile of work and a bunch of people. And this is what the book is about. How to create goals, manage piles of work, and work with people. &lt;/p&gt;</p>

<p>&lt;p&gt;In that, for the people, well defined roles might help but should never become the goal. Remember always: What is your goal? Is everything you do focussed on that goal? Run, stumble, learn, adapt, run ...&lt;/p&gt;</p>

<p>&lt;p&gt;So what are leaders and managers? &quot;Leaders and Manager are hired to amplify the value of everyone around them.&quot; Great quote.&lt;/p&gt;</p>

<p>&lt;p&gt;So what is the truth about schedules? They are a psychological forcing function and lead to three purposes: a commitment, the forcing function showing part of a whole, and to track progress. &lt;/p&gt;</p>

<p>&lt;p&gt;Then there is a rules of thirds, which will directly adapt to have even closer monitoring of goals: design, implement, test ... all take up a third of the time of a project, whereas test includes verifying, analyzing and refining a feature. But remember, in any schedule you are trying to predict the future and this is always rather difficult. A schedule is always a set of probabilities, which means you should also define what your schedule means. Is it a guess (40% accuracy), a good estimate (70%) or a thorough analysis (90%).&lt;/p&gt;</p>

<p>&lt;p&gt;So how does slippage in a schedule occur. You can ask these questions: Are there sick or vacation days; holidays; do we have regular progress reports; is somebody watching the schedule; is there ownership of the schedule in the team; are new feature requests blocked; is there a probability in the estimates; are there good specs.&lt;/p&gt;</p>

<p>&lt;p&gt;If there is a weak or actually no vision document (high level goals) x poor or no specs x poor or aggressive estimates x no budget for integration = a prayer of a schedule&lt;/p&gt;</p>

<p>&lt;p&gt;For requirements you will have three views: business, technology, customers and customers always has the lowest focus which should not be like that. Your Work Breakdown Structure (WBS) should come from Specs, which comes from the Vision documents who come from very high level requirements. In our case we get requests from internal and external customers, who come into a prioritized list, which move into sprints with a clear vision, closer but short specs built into a word breakdown structure per responsible.&lt;/p&gt;</p>

<p>&lt;p&gt;But what is a good vision? A good vision should simplify, making the group rules clear, should be SMART, consolidated, inspirational and memorable.&lt;/p&gt;</p>

<p>&lt;p&gt;Here thinking inside/outside/under the box is unimportant, keeping the constraints of the goals of the project in mind is. You should start your design from the customer perspective and mull over it with a diverse set of people to get lots of different experiences involved. The next problem is choosing a design and here you need to make sure you let the team know that it is time to converge after diverging for ideas. &lt;/p&gt;</p>

<p>&lt;p&gt;Specs as such should be written by one person and the more iterative a development process is the less specs are needed, which kind of solved my problem of wondering what I should spec in great detail in 2 week sprints ;) &lt;/p&gt;</p>

<p>&lt;p&gt;The important thing is that specs do three things: the right thing is built, the schedule includes a planning phase, and the specs allow for deep review. This is actually one reason we often build designs in the sprint before they are implemented, to have a bigger feedback cycle. &lt;/p&gt;</p>

<p>&lt;p&gt;Then comes the decision part: He lists 7 points to think about that normally you wouldn't go through. Hi first point is the typical 5 Whys and then of course there are general things like impact, experience, experts opinion and is there approval needed? Also make sure you only make decisions on things you need to make decisions on. Then go to the heart of the problem through e.g. Occam's Razor and take your time to reflect. Option lists might be important here.&lt;/p&gt;</p>

<p>&lt;p&gt;Remember, and this is why we have short sprints, communication is still the biggest problem, see Tower of Babel as a story. &lt;/p&gt;</p>

<p>&lt;p&gt;Then comes the people problem. How to annoy them: assume they are an idiot, don't trust them, waste their time, manage without respect, make them listen to stupid things. &lt;/p&gt;</p>

<p>&lt;p&gt;In terms of projects always see if they: accelerate progress, prevent problems, make important actions visible and measurable, include a process for changing and eliminating the process, people impacted are in favor of them.&lt;/p&gt;</p>

<p>&lt;p&gt;You can look at a function if you want: design time + learn time + (actual time of the process versus the time it took before * times used) needs to be smaller than (failure costs * failure probability * time this happens over the time of the use of the process). In the end though the time of using the process should be lower than the time you needed before.&lt;/p&gt;</p>

<p>&lt;p&gt;Quote: Mark Twain (corrected from Pascal from @taospace): If I had more time, I'd write a shorter letter.&lt;/p&gt;</p>

<p>&lt;p&gt;Going on with people he quotes Virginia Satir in saying that our response to a feeling is often not the first feeling but a second one. Sounds confusing as such, but think of me telling you that you smell. That should as such make you sad that you smell, but because I made you sad you feel angry towards me. Keep that in mind at all times. &lt;/p&gt;</p>

<p>&lt;p&gt;In the end, leadership is based on trust, and therefore a leaders behavior should be predictable. Do what you say, say what you mean, admit when you are wrong. &lt;/p&gt;</p>

<p>&lt;p&gt;In terms of why lists are important, he says that you need something simple to know that the most important thing gets done first. I agree here, but we keep our priorities a lot simpler than what he has listed. But you need to learn to say no and I agree here, while no is often something that is moved to a &quot;To be Speced&quot; or &quot;RFC&quot; sprint that is always open. Say no because: it doesn't fit the prios, only if we have time, only if X happens, next release and ... most important ... never. ever. really. Always keep in mind the critical path.&lt;/p&gt;</p>

<p>&lt;p&gt;There is lots more stuff in there but I'll end at that. No on to building our triage process ;)&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self Generated Content Infrastructure]]></title>
    <link href="http://thylmann.net/blog/2008/12/28/self-generated-content-infrastructure/"/>
    <updated>2008-12-28T08:59:00+01:00</updated>
    <id>http://thylmann.net/blog/2008/12/28/self-generated-content-infrastructure</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;We have loads of user generated content out there and I like it. The main thing behind getting into blogging years ago was my own personal remberall. I blogged the summaries from my MBA for example. This is also true for <a href="http://delicious.com">del.icio.us</a>, even though I haven't found the perfect bookmarking tool yet. <a href="http://furl.net">Furl</a> was actually getting close now thinking about it but it somehow stopped being used. Not sure why.&lt;/p&gt;</p>

<p>&lt;p&gt;Now I am starting to become a fan of <a href="http://brightkite.com">Brightkite</a>, am still an avid user of <a href="http://flickr.com">Flickr</a>, still love <a href="http://twitter.com">Twitter</a>, have my own <a href="http://stuff.thylmann.net">Tumblr like blog</a> (thinking about moving to Tumblr from Chyrp hating the not possible import feature). I am also on <a href="http://facebook.com">facebook</a> which aggregated my twitter stream and facebook aggregates it all, actually double aggregating some stuff because it's autotumbled.&lt;/p&gt;</p>

<p>&lt;p&gt;The problem I really have is that I want all that. I want it in one system where I can add private feeds and can search for it. I want it so it integrates all tags. If I look for tag &quot;advertising&quot; it should list all stuff for this tag, be it del.icio.us, tumblr, or wordpress. I want it to understand my exact location based on using brightkite and other service while not having to publish my location to flickr and other. This system also need to accept imports from all those platforms as RSS feeds are not going back far enough.&lt;/p&gt;</p>

<p>&lt;p&gt;Friendfeed is not bad already but I actually want Friendfeed to store all the content of the stuff that comes in from RSS feeds because I want it included in the searches. I don't want them to show it to me, I just want it returned in searches damn it, so it's not about duplicate content or something. I often do not have the word I want to find in the title of the post, if I even remember the title of the post.&lt;/p&gt;</p>

<p>&lt;p&gt;This is actually what lifestreaming is about but it's more of a personal lifestreaming thing. I do not care about sharing it with the world. I can, but it is too much for most people anyway. When I look back in my timeline I would love it tightly integrated with my current location at that time without having to tell that to the world. I want public and private photos. &lt;/p&gt;</p>

<p>&lt;p&gt;I am inches away to starting an open source project.&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Startup on Agile]]></title>
    <link href="http://thylmann.net/blog/2008/12/20/running-a-startup-on-agile/"/>
    <updated>2008-12-20T13:34:00+01:00</updated>
    <id>http://thylmann.net/blog/2008/12/20/running-a-startup-on-agile</id>
    <content type="html"><![CDATA[<p>I have this one sitting in my &quot;To Blog&quot; bookmarks list for ages now, so here it goes. It is actually inspired by a great post by Eric Ries entitled &quot;<a href="http://startuplessonslearned.blogspot.com/2008/09/new-version-of-joel-test-draft.html">A new version of the Joel Test</a>&quot;. The original <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a> was written in 2000 and Eric tried to update it a little bit based on his experience in software development in agile teams. Same as him I start with Joel's list.
&lt;ol&gt;</p>

<pre><code>&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you use source control&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;? &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;Yes, essential and check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Can you make a build in one step?&amp;lt;/span&amp;gt; We have continuous integration, so check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you make daily builds?&amp;lt;/span&amp;gt; Well, building continuously would qualify I think. Ok, we could always do with more automated test but we are doing ok.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have a bug database?&amp;lt;/span&amp;gt; Sure, check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you fix bugs before writing code?&amp;lt;/span&amp;gt; There I am with Eric, yes we try to, but bug is not bug. There are some things we accept to fix later. But we do have an ASAP list that gets precendence over anything else.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have an up-to-date schedule? &amp;lt;/span&amp;gt;Here I again agree with Eric, damn I agree aa lot with him, but that's the point. What we learned is that not the schedule is important, but keeping sprints short. As soon as a sprint goes over more than 2 weeks we have a problem of too big a backlog for the next one, too long testing, too much waiting, too hard to test features and the like. Our progress, which is what it is about, is better with shorter sprints, which take less planning and can actually be planned on the spot.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have a spec? &amp;lt;/span&amp;gt;Eric rephrases that into &amp;quot;does the team have a clear objective?&amp;quot; Yes, this is what is important. We try to have a 1-3 sentence goal for each sprint. Everything is aligned to that. There are then cross functional teams that build the spec. In the first meeting we create scribbles, get the features down, try to make the interactions clear, and go from there. This first meeting is very important though and we have failed in this before because you need the cross functional team there and you need to discuss things to the end and fight it out and the team needs to stay fixed afterwards. This is sometimes hard, but very important.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do programmers have quiet working conditions?&amp;lt;/span&amp;gt; It's not one size fits all. Two of our devs moved out of each others office because one likes to hear to music and one likes it quiet. Some want company, some don't. You need to enable that.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you use the best tools money can buy?&amp;lt;/span&amp;gt; We try to and this should probably be taking up a bit more, but hey, we are a startup that watches the money.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have testers?&amp;lt;/span&amp;gt; Everybody writes tests first and then codes, as best possible. Yes, we have somebody responsible that makes sure everybody does that, but developer is developer. This is still to be decided in my mind. After a certain team size you probably need someone that takes care of the infrastructure, enabling automated testing by developers, and builds new test cases and handles the release process. But for small teams, it's a team responsibility.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do new candidates write code during their interview?&amp;lt;/span&amp;gt; We didn't do that yet, but more or less knew the people we hired, so it wasn't so necessary. What we would be doing more in the future to give a new developer full responsibility for a new feature that is laid out so that it interacts with the entire platform. Then let everything be discussed in the weekly code review.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you do hallway usability testing? &amp;lt;/span&amp;gt;Majorly lacking here, sorry. We are trying to keep iterations short but will probably have to do some learning in this field.&amp;lt;/li&amp;gt;
</code></pre>

<p>&lt;/ol&gt;
Next up are some of his suggestions. Yes, we do work in small batches and through daily scrums we know who is working on what and hence there are little conflicts at checking. He also talks about practicing the five Whys which I remember from the MBA. It's a great idea. Why is it a great idea? Because it allows you to think up till the root cause? Why does that help? Because you don't fix something that does not need fixing but what really went wrong. Why? Because after the first idea you ask why again and go on from there... get the point? 5 Whys. It's a great system and oh so simple.</p>

<p>He then goes on to talk about the difference between defects and polish. This is very important to understand. We build a feature, often taking the easy way for the interface (after we learned building it complicated first is nuts ;)) and how it works but making sure there  are no bugs, that it works, and does so reliably. From there we can build polish if need be. This is a subtle difference, but an important one.</p>

<p>His last point is probably the most important one: Does everyone (he names programmers but that's not enough) understand how what they are doing relates to the company strategy, well being, vision, day to day business? This is where the cross functional teams help. It helps programmers understand what people do. A good developer will go nuts finding out that somebody sits there doing something in the interface for 2 hours every day when the dev can whip up something simple and get that down to 5 minutes. But you need to have communication.</p>

<p>That is actually one thing that I would like to add. The most important thing, and the reason for being of Agile, is that you have communication. The entire point of now doing waterfall development is that you know that the biggest problem in software development is that people speak different languages. Every party will need to try to work out what the other party really means. That is hard, and painful sometimes but only understanding will lead to good code.</p>
]]></content>
  </entry>
  
</feed>
