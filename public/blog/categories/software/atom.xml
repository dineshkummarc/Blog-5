<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Oliver Thylmann]]></title>
  <link href="http://thylmann.net/blog/categories/software/atom.xml" rel="self"/>
  <link href="http://thylmann.net/"/>
  <updated>2012-04-10T11:31:57+02:00</updated>
  <id>http://thylmann.net/</id>
  <author>
    <name><![CDATA[Oliver Thylmann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The solutions for the plain text nut]]></title>
    <link href="http://thylmann.net/blog/2010/02/20/the-solutions-for-the-plain-text-nut/"/>
    <updated>2010-02-20T12:33:00+01:00</updated>
    <id>http://thylmann.net/blog/2010/02/20/the-solutions-for-the-plain-text-nut</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;I have a further evolution of my <a href="http://thylmann.net/blog/2009/8/15/the-evolution-of-my-rememberall.html">Rememberall</a>. It's really staying mostly the same but I have added three things to further allow me to work efficiently. &lt;/p&gt;</p>

<p>&lt;p&gt;You have to remember that I am a text nut. I like stuff in plain text files. I like writing down stuff quickly and knowing its there somewhere without worrying where.&lt;/p&gt;</p>

<p>&lt;p&gt;So one of those apps I added, via <a href="http://twit.tv/mbw">MacBreak Weekly</a> or <a href="http://twit.tv/twit">TWiT</a> I think, is <a href="http://notational.net/">Notational Velocity</a>. It's a mouseless text entry system just made for quick text entry and retrieval. You have one search box, searching all your notes. Whenever you press enter a new note is created, when you press down you go into the list of notes. Simple as that. The fun extra thing is that you can tell Notational that it should store all texts in text files, which in my case get stored in a special directory that is synced to <a href="http://dropbox.com/">Dropbox</a>. Oh the joy ;)&lt;/p&gt;</p>

<p>&lt;p&gt;I have been working with notes like that for some time, but mostly in TextMate. The thing that is missing is easy access to the notes from the iPhone. Welcome <a href="http://simplenoteapp.com/">Simplenote</a>! It's a website where you can write text files and see them and they have an iPhone app and an API. Hence, now my Notational Velocity Syncs with Simplenote on my iPhone, and thanks to the pro Account all text files are backuped and I got an email I can simply send stuff to and have it converted into a Simplenote. I can also get an RSS Feed from my Notes. Oh the joy! :)&lt;/p&gt;</p>

<p>&lt;p&gt;So finally I have the solution I needed to have my written notes with me all the time. &lt;/p&gt;</p>

<p>&lt;p&gt;The other one I just bought for the iPhone is <a href="http://www.momentoapp.com/">Momento</a>. It's not perfect yet but it is going in the right directly. It is kind of a personal diary but the nice thing is that it can backup all your twitter items and flickr items and last.fm items. Now I am not using last.fm that much, but this really makes me wonder. I already suggested to the developer that they integrate more services and make me pay one by one. I would happily do that for Foursquare for example to add location to the diary. It might also solve my full backup bit.&lt;/p&gt;</p>

<p>&lt;p&gt;Oh the joy! ;)&lt;/p&gt;</p>

<p>&lt;p&gt;But I am repeating myself.&lt;/p&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a Startup on Agile]]></title>
    <link href="http://thylmann.net/blog/2008/12/20/running-a-startup-on-agile/"/>
    <updated>2008-12-20T13:34:00+01:00</updated>
    <id>http://thylmann.net/blog/2008/12/20/running-a-startup-on-agile</id>
    <content type="html"><![CDATA[<p>I have this one sitting in my &quot;To Blog&quot; bookmarks list for ages now, so here it goes. It is actually inspired by a great post by Eric Ries entitled &quot;<a href="http://startuplessonslearned.blogspot.com/2008/09/new-version-of-joel-test-draft.html">A new version of the Joel Test</a>&quot;. The original <a href="http://www.joelonsoftware.com/articles/fog0000000043.html">Joel Test</a> was written in 2000 and Eric tried to update it a little bit based on his experience in software development in agile teams. Same as him I start with Joel's list.
&lt;ol&gt;</p>

<pre><code>&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you use source control&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;? &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;Yes, essential and check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Can you make a build in one step?&amp;lt;/span&amp;gt; We have continuous integration, so check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you make daily builds?&amp;lt;/span&amp;gt; Well, building continuously would qualify I think. Ok, we could always do with more automated test but we are doing ok.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have a bug database?&amp;lt;/span&amp;gt; Sure, check.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you fix bugs before writing code?&amp;lt;/span&amp;gt; There I am with Eric, yes we try to, but bug is not bug. There are some things we accept to fix later. But we do have an ASAP list that gets precendence over anything else.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have an up-to-date schedule? &amp;lt;/span&amp;gt;Here I again agree with Eric, damn I agree aa lot with him, but that's the point. What we learned is that not the schedule is important, but keeping sprints short. As soon as a sprint goes over more than 2 weeks we have a problem of too big a backlog for the next one, too long testing, too much waiting, too hard to test features and the like. Our progress, which is what it is about, is better with shorter sprints, which take less planning and can actually be planned on the spot.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have a spec? &amp;lt;/span&amp;gt;Eric rephrases that into &amp;quot;does the team have a clear objective?&amp;quot; Yes, this is what is important. We try to have a 1-3 sentence goal for each sprint. Everything is aligned to that. There are then cross functional teams that build the spec. In the first meeting we create scribbles, get the features down, try to make the interactions clear, and go from there. This first meeting is very important though and we have failed in this before because you need the cross functional team there and you need to discuss things to the end and fight it out and the team needs to stay fixed afterwards. This is sometimes hard, but very important.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do programmers have quiet working conditions?&amp;lt;/span&amp;gt; It's not one size fits all. Two of our devs moved out of each others office because one likes to hear to music and one likes it quiet. Some want company, some don't. You need to enable that.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you use the best tools money can buy?&amp;lt;/span&amp;gt; We try to and this should probably be taking up a bit more, but hey, we are a startup that watches the money.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you have testers?&amp;lt;/span&amp;gt; Everybody writes tests first and then codes, as best possible. Yes, we have somebody responsible that makes sure everybody does that, but developer is developer. This is still to be decided in my mind. After a certain team size you probably need someone that takes care of the infrastructure, enabling automated testing by developers, and builds new test cases and handles the release process. But for small teams, it's a team responsibility.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do new candidates write code during their interview?&amp;lt;/span&amp;gt; We didn't do that yet, but more or less knew the people we hired, so it wasn't so necessary. What we would be doing more in the future to give a new developer full responsibility for a new feature that is laid out so that it interacts with the entire platform. Then let everything be discussed in the weekly code review.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span style=&amp;quot;font-weight: bold;&amp;quot;&amp;gt;Do you do hallway usability testing? &amp;lt;/span&amp;gt;Majorly lacking here, sorry. We are trying to keep iterations short but will probably have to do some learning in this field.&amp;lt;/li&amp;gt;
</code></pre>

<p>&lt;/ol&gt;
Next up are some of his suggestions. Yes, we do work in small batches and through daily scrums we know who is working on what and hence there are little conflicts at checking. He also talks about practicing the five Whys which I remember from the MBA. It's a great idea. Why is it a great idea? Because it allows you to think up till the root cause? Why does that help? Because you don't fix something that does not need fixing but what really went wrong. Why? Because after the first idea you ask why again and go on from there... get the point? 5 Whys. It's a great system and oh so simple.</p>

<p>He then goes on to talk about the difference between defects and polish. This is very important to understand. We build a feature, often taking the easy way for the interface (after we learned building it complicated first is nuts ;)) and how it works but making sure thereÂ  are no bugs, that it works, and does so reliably. From there we can build polish if need be. This is a subtle difference, but an important one.</p>

<p>His last point is probably the most important one: Does everyone (he names programmers but that's not enough) understand how what they are doing relates to the company strategy, well being, vision, day to day business? This is where the cross functional teams help. It helps programmers understand what people do. A good developer will go nuts finding out that somebody sits there doing something in the interface for 2 hours every day when the dev can whip up something simple and get that down to 5 minutes. But you need to have communication.</p>

<p>That is actually one thing that I would like to add. The most important thing, and the reason for being of Agile, is that you have communication. The entire point of now doing waterfall development is that you know that the biggest problem in software development is that people speak different languages. Every party will need to try to work out what the other party really means. That is hard, and painful sometimes but only understanding will lead to good code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Security by Mario Heiderich]]></title>
    <link href="http://thylmann.net/blog/2008/12/12/web-application-security-by-mario-heiderich/"/>
    <updated>2008-12-12T20:34:00+01:00</updated>
    <id>http://thylmann.net/blog/2008/12/12/web-application-security-by-mario-heiderich</id>
    <content type="html"><![CDATA[<p><a href="http://php-ids.org/2008/12/11/it-has-landed/">The book</a> is in german and called &quot;<a href="http://www.amazon.de/Sichere-Webanwendungen-Flash-Sicherheit-Session-Hijacking-Web-2-0-Sicherheit/dp/3836211947/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1228948140&amp;amp;sr=8-1">Sichere Webanwendungen</a>&quot; and Mario is not the only author, but having been one of the key people at Ormigo, I thought I'd mention that a book he co-wrote is out. Other authors include <a href="http://blog.fukami.io/">fukami</a>, <a href="http://christ1an.blogspot.com/">Christian Matthies</a> and Johannes Dahse.</p>

<p>And if somebody knows what web site security is about, then <a href="http://mario.heideri.ch/">Mario</a> is the man. So much so that he can get on your nerves some times and I say that as the higest form of flattery ;). On a side note, he developed <a href="http://php-ids.org/">PHPIDS</a> at Ormigo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structuring your Development Environment]]></title>
    <link href="http://thylmann.net/blog/2008/04/30/structuring-your-development-environment/"/>
    <updated>2008-04-30T08:10:00+02:00</updated>
    <id>http://thylmann.net/blog/2008/04/30/structuring-your-development-environment</id>
    <content type="html"><![CDATA[<p>As Ibo <a href="http://www.ibrahimevsan.de/2008/04/29/secret-garden-prinzip-in-der-entwicklung/">just posted about Sevenload's Secret Garden strategy</a>, I thought I'd wage in with my own thoughts on structuring your development environment. We see ourselves as a technology company at Ormigo, mainly because we do not believe the local market problem, getting it online, will be solved with a sales force.</p>

<p>Ibo's article is in german so I will try to translate a few of his views and comment and elaborate. He is only giving a few insights, but they are relevant none the less. The basic idea is to build an environment that helps to build great products.</p>

<p>What Ibo has developed, with Tom and Axel, is to put the developers in a &quot;hermetically sealed&quot; environment, meaning they are behind closed doors. The general idea is good in that you need to get into a flow and disrupting developers in their work is bad. Fully closing the door and letting nobody in is an interesting concept and I am looking forward to hearing more of how it works. From my personal experience I would argue that you then need core teams and an operations team and that operations team needs to be in another room, because there are operating things that need to be discussed shortly.</p>

<p>The other big problem with this closed door is that you loose communication, and the most important thing in software development is communication. That is the entire idea behind scrum, which he hints on later. Of course the communication needs to be structured, but based on his idea, there would be no problem having teams dispersed over different countries, especially because he says that most communication goes over an internal IM client.</p>

<p>He does say that developers need the right gear and among others two monitors. We have been doing that from the start and it is proving very valuable, but it is not limited to developers. Especially if you say that developers need a laptop, buying a second 20+&quot; monitor is needed and the price point is not so much different from a desktop system in many cases. One thing I like is his idea of having large flatscreens on the wall that give the status of the servers and features in development or just launched.</p>

<p>There are no walls between people in the same group, which I agree too, but only glass walls between different teams within development. We actually have smaller rooms here, with 2-3 people in development in one room because some people need to close the door from time to time. That is really his secret garden idea but tailored to the developers that want it like that and those that don't.</p>

<p>His basic ideas of a secret garden actually fit to scrum again and also are often common sense, like not fighting but discussing. But that is a culture thing and the culture at Ormigo can sometimes seem rough. This is an extension of having people with experience and clear views in the company though, and we can all disagree vehemently, discuss things and then come to the conclusion for a plan to follow, because each view has been heard and we can then agree to disagree but agree on a plan. That is very important, and needs a good managed of a meeting culture, which is independent of the secret garden system though in my mind.</p>

<p>He also says that they have only structured discussion among small teams, also with different departments, which is fully reasonable. It fits with our meeting system for bi-weekly deploys. In the middle of the current sprint we have a short meeting with everybody for an update of the current sprint and discussing the next sprints high level goals. There we also discuss who is responsible, which will be one person from bizdev and one developer as a minimum. That allows for rotating responsibilities through the entire team. This small team then makes sure to get a better idea about what the next sprint will be about showing that in a short meeting over lunch at the end of the week. Next monday we normally deploy our current sprint, and then go down into tasks for the following sprint, splitting up different tasks for different people in kind of sub-responsibilities. Then the system starts over. So yes, you need small meetings, clear responsibilities, but you need very semipermeable walls between each department in the company, while being clear that you don't just walk up to somebody and ask a short question (which is hard sometimes).</p>

<p>Congratulations for using JIRA as a task management system, even though I am not sure if it does not create too much task management overhead. Doing development for corporations that might be needed though. We are using Trac internally and are feeling very happy with it because it allows us to easily handle small sprints and mix around tasks. Yes, there are no task dependencies in the system and no required process flow, but that is not needed with the right structure behind it and small sprints. These interdependencies are only needed if you do a 3 month sprint for example, where you start to need a real project management. Interdependencies are for us between sprints on a higher level.</p>

<p>He also says that often you loose yourself in technical details, which is something I can only agree with. This is why the development team needs to know the business side and the numbers and the real goals. Goals are not &quot;build feature x&quot; but &quot;get more SEM traffic&quot; or &quot;allow more ratings&quot; which can be measured afterwards. The technical detail bit is actually what makes the difference between a great developer and a good one. A great developer will know what is needed and what is overkill. You should not die in beauty. But there again the bi-weekly deploy system works very well in that it requires you to focus.</p>

<p>Looking forward to hearing more from Ibo about their structure and how it is working out. Scrum is great but real Scrum is REALLY hard.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nine things developers want more than money]]></title>
    <link href="http://thylmann.net/blog/2006/11/05/nine-things-developers-want-more-than-money/"/>
    <updated>2006-11-05T11:35:00+01:00</updated>
    <id>http://thylmann.net/blog/2006/11/05/nine-things-developers-want-more-than-money</id>
    <content type="html"><![CDATA[<p>&lt;p&gt;Very <a href="http://www.softwarebyrob.com/articles/Nine_Things_Developers_Want_More_Than_Money.aspx">good post</a> over at Software by Rob. It's about the important things that developers need to work happily at your company.&lt;/p&gt;</p>

<p>&lt;p&gt;He places everything in two parts. <a href="http://www.12manage.com/methods_herzberg_two_factor_theory.html">Hygiene and Motivation</a>. This is actually very similar to <a href="http://blog.thylmann.net/2003/04/03/understanding-motivation/">Maslow's hierarchy of needs</a> something that is always again turning out to be true. Maslow put motivation into a hierarchy.&lt;/p&gt;</p>

<p>&lt;ul&gt;
&lt;li&gt;Physical Needs: working conditions, wage, housing, catering,Ã¢â¬Â¦&lt;/li&gt;
&lt;li&gt;Safety: health insurance, pension provision, safety, security in job&lt;/li&gt;
&lt;li&gt;Social: sports, clubs, parties, outings, open communications, Ã¢â¬Â¦&lt;/li&gt;
&lt;li&gt;Esteem: Regular positive feedback, prestigious job titles, promotions&lt;/li&gt;
&lt;li&gt;Self-actualisation: challenging, encouraging, can structure own work&lt;/li&gt;
&lt;/ul&gt;</p>

<p>&lt;p&gt;The idea is that you need the first parts like with a pyramid. If the base is not there, it is futile to add the others. In bad working conditions, no amount of challenge will lead to motivation.
The same thing is true for hygiene. You need it to start with. Or at least a good amount of it. Maslow is actually a bit clearer that you need the base as a must have.
So let's put this more into perspective for developers.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;1. Being Set Up to Succeed&lt;/strong&gt;
The idea is that you really want to build something, something that doesn't put unnecessary road blocks in your way, that is maintainable. It needs to be a quality product. It's craftsmanship. You don't tell a craftsman to build a crappy table. I am happy to be able to put a check here.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;2. Having Excellent Management&lt;/strong&gt;
You need to take bullets for your team, no micro-managing, give them free the freedom to think themselves. This is really too early to tell. This really takes time to build up. The verdict is still out.
&lt;strong&gt;3. Learning New Things&lt;/strong&gt;
It seems that if your job gets more variety, and you get to acquire new skills, you will forgo a 20% raise. A really good developer needs to learn. Of course they have to want to, which is kind of a circle. Good developers do. This is a kind of test. I am making damn sure they have the option.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;4. Exercising Creativity and Solving the Right Kind of Problems&lt;/strong&gt;
I think I have to try one suggestion he has: drop a Sudoku in the middle of the developers to see them attack it. Might be a good trick when hiring somebody new. :) I agree that developers love challenge in general, so a big job is to make sure that the problem at hand is a difficult one. And remember, easy problems can be difficult if put in the right light and made into a challenge.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;5. Having a Voice&lt;/strong&gt;
When a developer speaks, somebody has to listen. Simple. That's actually true for all people I'd say.
&lt;strong&gt;
6. Being Recognized for Hard Work&lt;/strong&gt;
Peer pressure. Something Google uses as a management style. Hard to make right and not backfire.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;7. Building Something that Matters&lt;/strong&gt;
Building something that somehow has more reason than making money. I think we score big there at Ormigo, because we give local merchants an option to compete in the global advertising market.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;8. Building Software without an Act of Congress&lt;/strong&gt;
Let them build it. Don't talk about building it, but build it.&lt;/p&gt;</p>

<p>&lt;p&gt;&lt;strong&gt;9. Having Few Legacy Constraints&lt;/strong&gt;
This is really a cry for refactoring and putting that into your development model, making time for it. The thing is that you don't want anything in your app to hold you back. But as you are learning along the way, the stuff holding you back will appear again and again.&lt;/p&gt;</p>

<p>&lt;p&gt;I actually have to say that we are doing pretty well at Ormigo. A lot of this can be read out of simple management practices from an MBA if you look at it from the right angle.&lt;/p&gt;</p>
]]></content>
  </entry>
  
</feed>
